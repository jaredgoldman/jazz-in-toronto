// Libraries
import { z } from 'zod'
import {
    createTRPCRouter,
    publicProcedure,
    protectedProcedure
} from '~/server/api/trpc'
// Utils
import addDays from 'date-fns/addDays'

export const eventRouter = createTRPCRouter({
    create: publicProcedure
        .input(
            z.object({
                name: z.string(),
                startDate: z.date(),
                endDate: z.date(),
                featured: z.boolean().optional(),
                instagramHandle: z.string().optional(),
                website: z.string().optional(),
                bandId: z.string().cuid(),
                venueId: z.string().cuid()
            })
        )
        .mutation(({ ctx, input }) => {
            const { bandId, venueId, ...eventData } = input
            return ctx.prisma.event.create({
                data: {
                    ...eventData,
                    band: { connect: { id: bandId } },
                    venue: { connect: { id: venueId } }
                }
            })
        }),

    get: publicProcedure
        .input(z.object({ id: z.string().cuid() }))
        .query(({ ctx, input }) => {
            return ctx.prisma.event.findUnique({
                where: { id: input.id }
            })
        }),

    getAll: publicProcedure.query(({ ctx }) => {
        return ctx.prisma.event.findMany({
            include: {
                band: true,
                venue: true
            }
        })
    }),

    getAllByDay: publicProcedure
        .input(z.object({ date: z.date() }))
        .query(({ ctx, input }) => {
            return ctx.prisma.event.findMany({
                where: {
                    startDate: {
                        gte: new Date(input.date.setHours(0, 0, 0, 0)),
                        lt: new Date(addDays(input.date, 1))
                    }
                },
                include: {
                    band: true,
                    venue: true
                }
            })
        }),

    getAllByMonth: publicProcedure
        .input(z.object({ month: z.number(), year: z.number() }))
        .query(({ ctx, input }) => {
            return ctx.prisma.event.findMany({
                where: {
                    startDate: {
                        gte: new Date(input.year, input.month, 1),
                        lt: new Date(input.year, input.month + 1, 1)
                    }
                },
                include: {
                    band: true,
                    venue: true
                }
            })
        }),

    update: protectedProcedure
        .input(
            z.object({
                id: z.string().cuid(),
                name: z.string().optional(),
                startDate: z.date().optional(),
                endDate: z.date().optional(),
                featured: z.boolean().optional(),
                instagramHandle: z.string().optional(),
                website: z.string().optional(),
                bandId: z.string().cuid().optional(),
                venueId: z.string().cuid().optional(),
                cancelled: z.boolean().optional()
            })
        )
        .mutation(({ ctx, input }) => {
            const { id, ...eventData } = input
            return ctx.prisma.event.update({
                where: { id },
                data: eventData
            })
        }),

    delete: protectedProcedure
        .input(z.object({ id: z.string().cuid() }))
        .mutation(({ ctx, input }) => {
            return ctx.prisma.event.delete({
                where: { id: input.id }
            })
        }),

    getVenueEvents: protectedProcedure
        .input(z.object({ venueId: z.string().cuid(), date: z.date() }))
        .mutation(async ({ ctx, input }) => {
            await ctx.prisma.$transaction(async (prisma) => {
                const venue = await prisma.venue.findUnique({
                    where: { id: input.venueId }
                })

                if (venue && ctx.scraperService) {
                    // Initialize the scraper service outside the loop
                    await ctx.scraperService.init(venue)

                    const events = await ctx.scraperService.getEvents(
                        input.date
                    )
                    const processedEvents = []
                    const newBands = new Set<string>()
                    for (const event of events) {
                        // Check for existing events outside the loop
                        const existingEvent = await prisma.event.findUnique({
                            where: {
                                startDate_venueId: {
                                    venueId: input.venueId,
                                    startDate: input.date
                                }
                            }
                        })
                        if (
                            existingEvent &&
                            existingEvent.name
                                .toLowerCase()
                                .includes(event.name.toLowerCase())
                        ) {
                            continue
                        }

                        let band = await prisma.band.findFirst({
                            where: {
                                name: {
                                    contains: event.name.toLowerCase(),
                                    mode: 'insensitive'
                                },
                                active: true
                            }
                        })

                        if (!band) {
                            // Collect new bands in a set to create them later
                            newBands.add(event.name)
                        }

                        const processedEvent = await prisma.event.create({
                            data: {
                                name: event.name,
                                venueId: input.venueId,
                                bandId: band ? band.id : undefined,
                                startDate: event.startDate,
                                endDate: event.endDate
                            },
                            include: {
                                band: true,
                                venue: true
                            }
                        })
                        processedEvents.push(processedEvent)
                    }
                }

                // Create the new bands after the loop
                for (const bandName of newBands) {
                    await prisma.band.create({
                        data: {
                            name: bandName
                        }
                    })
                }

                return processedEvents
            })
        }),

    post: protectedProcedure
        .input(
            z.object({
                files: z.array(
                    z.object({ fileKey: z.string(), fileUrl: z.string() })
                ),
                caption: z.string()
            })
        )
        .mutation(async ({ ctx, input }) => {
            // post to instagram
            if (ctx.postService) {
                ctx.postService.init(input)
                await ctx.postService.postAndDeleteImages()
                // return res.status(200).json({ message: 'Posted to Instagram' })
            }
        }),

    getFeatured: publicProcedure.query(({ ctx }) => {
        return ctx.prisma.event.findFirst({
            where: { featured: true },
            include: {
                band: true,
                venue: true
            }
        })
    }),

    setFeatured: protectedProcedure
        .input(z.object({ id: z.string().cuid() }))
        .mutation(async ({ ctx, input }) => {
            // First remove any other features
            // Only one band hsould be featured at a time
            await ctx.prisma.event.updateMany({
                where: { featured: true },
                data: { featured: false }
            })
            return ctx.prisma.event.update({
                where: { id: input.id },
                data: { featured: true }
            })
        })
})
